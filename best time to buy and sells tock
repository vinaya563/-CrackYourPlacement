class Solution {
public:
int helper(vector<int> &prices , vector<vector<int>> &dp,int idx,int buy,int k)
{
    if(idx==prices.size())
    return 0;
    if(k==1)return 0;
    int profit=0;
    if(dp[idx][buy]!=-1)
    return dp[idx][buy];
    if(buy==1)
    {
        int take=-prices[idx]+helper(prices,dp,idx+1,0,0);
        int nottake=helper(prices,dp,idx+1,1,0);
        profit=max(take,nottake);
    }
    else
    {
        int take=prices[idx]+helper(prices,dp,idx+1,1,1);
        int nottake=helper(prices,dp,idx+1,0,0);
        profit=max(take,nottake);
    }
    return dp[idx][buy]=profit;
}
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        return helper(prices,dp,0,1,0);

    }
};
